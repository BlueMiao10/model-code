const countSort = function (arr) {
  //定义一个空数组，用来计算待排序数组中数字出现的个数
  const C = []
  //遍历数组，得到每个元素
  for (let i = 0; i < arr.length; i++) {
    //声明变量j等于数组中的元素
    const j = arr[i]
    //当j出现过则相应次数加1。如果没出现过就出现1次
    C[j] >= 1 ? C[j]++ : C[j] = 1
  }

  //声明一个数组用来放置排好的数组
  const D = []
  //遍历数组C
  for (let j = 0; j < C.length; j++) {
    //举例来说C[0]的值代表0在原数组中出现的次数
    //如果C[j]是存在的则取看他出现的的次数  如果没出现过则进行下一轮遍历
    if (C[j]) {
      //次数大于0就往数组里push相应的数字，并且次数减1，直到次数为0
      while (C[j] > 0) {
        D.push(j)
        C[j]--
      }
    }
  }
  return D
}


/*
* 从以上可以看到，这个算法只能存储整数且需要消耗大量的空间。因此计数排序适合==量大、范围小==的排序
*
* */